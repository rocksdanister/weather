//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.1+g046e9eb0a2
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 2.4 -InputFile Tweak.json
//       
//       Input file:
//           Tweak.json (4121 bytes created 12:17+05:30 Dec 2 2024)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    50 |
// |--------------------------+-------|
// | Expression animators     |     2 |
// | KeyFrame animators       |     2 |
// | Reference parameters     |     2 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     2 |
// |--------------------------+-------|
// | Brushes                  |     2 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Windows.UI.Composition;

namespace Drizzle.UI.UWP.AnimatedIcons
{
    // Name:        Main Scene
    // Frame rate:  60 fps
    // Frame count: 240
    // Duration:    4000.0 mS
    sealed class Tweak
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 4.000 seconds.
        internal const long c_durationTicks = 40000000;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (Tweak_AnimatedVisual.IsRuntimeCompatible())
            {
                var res = 
                    new Tweak_AnimatedVisual(
                        compositor
                        );
                    return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 240d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 240d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class Tweak_AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 40000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - Layer aggregator
            // - - ShapeGroup: Polystar 1
            // - Path 1+Path 2.PathGeometry
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2() },
                    CanvasFilledRegionDetermination.Alternate);
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Polystar 1
            // - - Path 1+Path 2.PathGeometry
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -100F));
                    builder.AddCubicBezier(new Vector2(21.1350002F, -100F), new Vector2(-0.626999974F, -86.8509979F), new Vector2(30.6149998F, -73.9100037F));
                    builder.AddCubicBezier(new Vector2(61.8569984F, -60.9690018F), new Vector2(55.7659988F, -85.6559982F), new Vector2(70.7109985F, -70.7109985F));
                    builder.AddCubicBezier(new Vector2(85.6559982F, -55.7659988F), new Vector2(60.9690018F, -61.8569984F), new Vector2(73.9100037F, -30.6149998F));
                    builder.AddCubicBezier(new Vector2(86.8509979F, 0.626999974F), new Vector2(100F, -21.1350002F), new Vector2(100F, 0F));
                    builder.AddCubicBezier(new Vector2(100F, 21.1350002F), new Vector2(86.8509979F, -0.626999974F), new Vector2(73.9100037F, 30.6149998F));
                    builder.AddCubicBezier(new Vector2(60.9690018F, 61.8569984F), new Vector2(85.6559982F, 55.7659988F), new Vector2(70.7109985F, 70.7109985F));
                    builder.AddCubicBezier(new Vector2(55.7659988F, 85.6559982F), new Vector2(61.8569984F, 60.9690018F), new Vector2(30.6149998F, 73.9100037F));
                    builder.AddCubicBezier(new Vector2(-0.626999974F, 86.8509979F), new Vector2(21.1350002F, 100F), new Vector2(0F, 100F));
                    builder.AddCubicBezier(new Vector2(-21.1350002F, 100F), new Vector2(0.626999974F, 86.8509979F), new Vector2(-30.6149998F, 73.9100037F));
                    builder.AddCubicBezier(new Vector2(-61.8569984F, 60.9690018F), new Vector2(-55.7659988F, 85.6559982F), new Vector2(-70.7109985F, 70.7109985F));
                    builder.AddCubicBezier(new Vector2(-85.6559982F, 55.7659988F), new Vector2(-60.9690018F, 61.8569984F), new Vector2(-73.9100037F, 30.6149998F));
                    builder.AddCubicBezier(new Vector2(-86.8509979F, -0.626999974F), new Vector2(-100F, 21.1350002F), new Vector2(-100F, 0F));
                    builder.AddCubicBezier(new Vector2(-100F, -21.1350002F), new Vector2(-86.8509979F, 0.626999974F), new Vector2(-73.9100037F, -30.6149998F));
                    builder.AddCubicBezier(new Vector2(-60.9690018F, -61.8569984F), new Vector2(-85.6559982F, -55.7659988F), new Vector2(-70.7109985F, -70.7109985F));
                    builder.AddCubicBezier(new Vector2(-55.7659988F, -85.6559982F), new Vector2(-61.8569984F, -60.9690018F), new Vector2(-30.6149998F, -73.9100037F));
                    builder.AddCubicBezier(new Vector2(0.626999974F, -86.8509979F), new Vector2(-21.1350002F, -100F), new Vector2(0F, -100F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Layer aggregator
            // - - - ShapeGroup: Polystar 1
            // - - Path 1+Path 2.PathGeometry
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -50F));
                    builder.AddCubicBezier(new Vector2(27.6140003F, -50F), new Vector2(50F, -27.6140003F), new Vector2(50F, 0F));
                    builder.AddCubicBezier(new Vector2(50F, 27.6140003F), new Vector2(27.6140003F, 50F), new Vector2(0F, 50F));
                    builder.AddCubicBezier(new Vector2(-27.6140003F, 50F), new Vector2(-50F, 27.6140003F), new Vector2(-50F, 0F));
                    builder.AddCubicBezier(new Vector2(-50F, -27.6140003F), new Vector2(-27.6140003F, -50F), new Vector2(0F, -50F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Layer aggregator
            // - -  Offset:<200, 167>
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(20.1669998F, -36.0699997F));
                    builder.AddLine(new Vector2(10.875F, 4.72800016F));
                    builder.AddLine(new Vector2(-12.4250002F, 4.98500013F));
                    builder.AddLine(new Vector2(-20F, -22F));
                    builder.AddLine(new Vector2(-24F, -35.75F));
                    builder.AddCubicBezier(new Vector2(-24F, -35.75F), new Vector2(-44.75F, -25F), new Vector2(-41.75F, 4.5F));
                    builder.AddCubicBezier(new Vector2(-39.8300018F, 23.375F), new Vector2(-27.6310005F, 34.3330002F), new Vector2(-15.3690004F, 39.2929993F));
                    builder.AddCubicBezier(new Vector2(-9.4630003F, 41.6819992F), new Vector2(-23.625F, 185.5F), new Vector2(2F, 185.5F));
                    builder.AddCubicBezier(new Vector2(28.5F, 185.5F), new Vector2(13.6289997F, 40.5540009F), new Vector2(19.4820004F, 37.4350014F));
                    builder.AddCubicBezier(new Vector2(33.0779991F, 30.1900005F), new Vector2(43.9469986F, 15.3959999F), new Vector2(41.5F, -5.75F));
                    builder.AddCubicBezier(new Vector2(39.1650009F, -25.9279995F), new Vector2(20.1669998F, -36.0699997F), new Vector2(20.1669998F, -36.0699997F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Layer aggregator
            // Offset:<200, 167>
            CompositionColorBrush ColorBrush_AlmostLightSlateGray_FF8E9094()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x8E, 0x90, 0x94));
            }

            // - Layer aggregator
            // ShapeGroup: Polystar 1
            CompositionColorBrush ColorBrush_AlmostSilver_FFBABEC1()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xBA, 0xBE, 0xC1));
            }

            // - Layer aggregator
            // ShapeGroup: Polystar 1
            // Path 1+Path 2.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - Layer aggregator
            // Offset:<200, 167>
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // Layer aggregator
            // Path 1+Path 2
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape(PathGeometry_0());
                result.Offset = new Vector2(200F, 165F);
                result.FillBrush = ColorBrush_AlmostSilver_FFBABEC1();
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_90(), RootProgress());
                return result;
            }

            // Layer aggregator
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<200, 167>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 200F, 167F), ColorBrush_AlmostLightSlateGray_FF8E9094());;
                StartProgressBoundAnimation(result, "RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), _rootProgress);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.243000001F, 0F), new Vector2(0.0869999975F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - Layer aggregator
            // Offset:<200, 167>
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, _stepThenHoldEasingFunction);
                // Frame 30.
                result.InsertKeyFrame(0.125F, 0F, _holdThenStepEasingFunction);
                // Frame 60.
                result.InsertKeyFrame(0.25F, 45F, _c.CreateCubicBezierEasingFunction(new Vector2(0.957000017F, 0F), new Vector2(0.680999994F, 1F)));
                // Frame 75.
                result.InsertKeyFrame(0.3125F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.637000024F, 0F), new Vector2(0.407000005F, 1F)));
                // Frame 93.
                result.InsertKeyFrame(0.387499988F, 45F, CubicBezierEasingFunction_0());
                // Frame 125.
                result.InsertKeyFrame(0.520833313F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.407000005F, 1F)));
                // Frame 141.
                result.InsertKeyFrame(0.587499976F, 45F, _cubicBezierEasingFunction_0);
                // Frame 166.
                result.InsertKeyFrame(0.691666663F, 0F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0F), new Vector2(0.833000004F, 1F)));
                return result;
            }

            // - Layer aggregator
            // ShapeGroup: Polystar 1
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_90()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 30.
                result.InsertKeyFrame(0.125F, 0F, HoldThenStepEasingFunction());
                // Frame 60.
                result.InsertKeyFrame(0.25F, 30F, _c.CreateCubicBezierEasingFunction(new Vector2(0.949000001F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 75.
                result.InsertKeyFrame(0.3125F, 30F, _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.152999997F, 1F)));
                // Frame 93.
                result.InsertKeyFrame(0.387499988F, 60F, _c.CreateCubicBezierEasingFunction(new Vector2(0.397000015F, 0F), new Vector2(0.238000005F, 1F)));
                // Frame 125.
                result.InsertKeyFrame(0.520833313F, 60F, _c.CreateCubicBezierEasingFunction(new Vector2(0.00100000005F, 0F), new Vector2(0.666999996F, 1F)));
                // Frame 141.
                result.InsertKeyFrame(0.587499976F, 90F, _c.CreateCubicBezierEasingFunction(new Vector2(0.721000016F, 0F), new Vector2(0.666999996F, 1F)));
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(400F, 400F);
                var shapes = result.Shapes;
                // ShapeGroup: Polystar 1
                shapes.Add(SpriteShape_0());
                // Offset:<200, 167>
                shapes.Add(SpriteShape_1());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            internal Tweak_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(400F, 400F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
